= PURPOSE =

This project is meant to give an introduction to computers (I plan to expand to networking and security - and welcome contributions into other computer related fields). However, I don't intend to reinvent the wheel. This means that if someone already has written good documentation, I will link to it. This also means that a large part of the work is already done. What I haven't seen is a resource that takes the plethora of introductory information and put it in one place. I intend to cover theory more than any one language, architecture, or software (I don't care if you think one thing is better than something else).

= Intro to programming =
TODO: I need to find a good tutorial (or write one) for describing how event loops work so that I can expect people to move from JS and other languages easily. Maybe it is better to rely on patterns?<br/>
TODO: I need to figure out how to split some of this out so that someone can go through this in some sort of order (instead of just being bookmarks with comments).<br/>

There is only one way to learn how to program - by programming.<br/>

If you go through these tutorials and don't write any code, your return on inventment is liable to be quite small (or none at all). The best advise for learning to program is to write as much code as possible and fail often. If you are afraid your code won't work and haven't tried it because of that fear, you're doomed. When you are presented with code examples, start trying them. Fail alot and learn alot, never fail and learn nothing.<br/>

There is also this:<br/>
http://www.cprogramming.com/how_to_learn_to_program.html<br/>

== Video tutorials ==

Some video tutorials to start with:<br/>

* Basic Javascript:
http://www.w3.org/wiki/Programming_-_the_real_basics<br/>

* This MIT OpenCourseWare class was recommended (and seems to be pretty good). It uses Python and introduces lots of fundamental consepts quite nicely:
http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/<br/>

* Douglas Crockford has done some really good talks on js. He goes through computer history, into programming languages, and then onto javascript. This is a very informative introduction:<br/>
http://yuiblog.com/crockford/<br/>

== Text tutorials ==

The Languages section here gives a nice introduction to a dozen different languages:<br/>
http://www.fincher.org/tips/index.shtml<br/>

An interactive tutorial for python programming:<br/>
http://www.learnpython.org/<br/>

Natural Language Processing with Python (Book) - Natural Language Toolkit (this text is so well written, it made me start looking at Python outside of Sage):<br/>
http://www.nltk.org/book<br/>

The IBM AJAX series of articles:<br/>
http://www.ibm.com/developerworks/web/library/wa-ajaxintro1/index.html<br/>

Another good set of tutorials (centered around Node.JS and server-side libraries) is:<br/>
http://nodetuts.com/<br/>

This is somewhat more advanced but JS has very few rules, so you will probably get to reading this pretty soon):<br/>
http://robertnyman.com/2008/10/21/javascript-inheritance-experimenting-with-syntax-alternatives-and-private-variables/<br/>

=== Algorithms ===
Note: You should figure out how much time you wish to spend looking at these. The more time you spend playing with different algorithms will make you a better programmer. However you can accomplish lots of tasks without knowing much about how different algorithms work.

* http://rosettacode.org/wiki/Main_Page
* https://en.wikipedia.org/wiki/Introduction_to_Algorithms
* https://mitpress.mit.edu/sicp/full-text/book/book.html

== Javascript Libraries ==

* JQuery:<br/>
http://jquery.com/<br/>

** JQuery tutorials:<br/>
http://jqfundamentals.com/<br/>
http://tutsplus.com/lesson/hello-jquery/<br/>

** 3rd party plugins for JQuery:<br/>
http://jqueryui.com/<br/>
----

* MooTools:<br/>
http://mootools.net/<br/>

* Prototype - looks Perl-ish, but does some evilness (messing with the object.prototype):<br/> 
http://prototypejs.org/<br/>

* YUI - this does some very cool things (seems to beautify pages too) but it is slow and doesn't have the amount of people using it as jquery does:<br/>
http://developer.yahoo.com/yui/<br/>

== JS tools ==

Firebug:<br/>
https://addons.mozilla.org/en-US/firefox/addon/firebug/<br/>

Node.JS:<br/>
http://nodejs.org/<br/>

A very nice and simple web templating language:<br/>
http://handlebarsjs.com/<br/>

= Help and Community =

== Search ==

In order to navigate the internet today, you must know how to find information. There are quite a few search services available. That said, if you ask a question that someone can copy and paste into a Google search and find one of the first few links answers your question, they won't be pleased with you. You've just wasted their time. So, do a few searches before asking a question in any public forum. If you are unsure of this point, Google 'asking smart questions' or see:
* http://catb.org/~esr/faqs/smart-questions.html
* http://support.microsoft.com/kb/555375

== Books ==

With so much information on the web, its hard to recommend buying material that was probably out of date at the time of publication. That said, there are some times where this makes sense. The only type of book that I would consider spending money on are those that cover core language consepts. However, before you start looking at user reviews on amazon and spending your hard earned money, consider reading them on your computer:<br/>
http://hackershelf.com/browse/<br/>
And then there's the K&R C Programming book.<br/>
http://www.amazon.com/C-Programming-Language-2nd-Edition/dp/0131103628<br/>
(don't buy this, go to the library and check it out - every library should have at least one copy of this book)<br/>

== Mailing lists ==

Most projects have a mailing list <https://en.wikipedia.org/wiki/Mailing_list/>. If you think you'll be using the project, I suggest you join the mailing list before you actually have a question. This way, you can get a feel for what the community is like, what type of questions might not be appropriate, etc. Most lists provide an archive too, but I think people are more likely to read things sent to their inbox than going through an archive (atleast I am).<br/>

== IRC ==

Spend some time learning how to use IRC. For lots of projects this is the best resource out there (and it's immediate). This tutorial looks pretty reasonable:<br/>
http://www.ircbeginner.com/index.php<br/>
This also seems to have some good tutorials:<br/>
http://www.irchelp.org/<br/>

== Web Forums ==

There are tons of these. Since some of these forums might not get that much traffic, I'll list a few:
* https://stackexchange.com/
* http://stackoverflow.com/
* http://www.perlmonks.org/ (language specific - Perl)

== Github ==

I learn best by example (then I look at the API for clarification). Most projects have examples. However, you can also find fully functional projects on Github.

= An Editor =

Don't use the editor of an office suite (Microsoft Word, LibreOffice Text, etc) to write programs. Though you might be inclined to use the same tool to write code as you do to write documents, this is generally a bad idea. The exception is if you are already using an editor that has the features you'll want when coding. There are quite a few editors that are quite adequate for coding. I'm going to try to order this short list of editors from hardest to learn to easiest:

* Emacs <https://www.gnu.org/software/emacs/>
* VIM <http://www.vim.org/>
* Coda $ <https://www.panic.com/coda/>
* TextMate <https://macromates.com/>
* Notepad++ <http://notepad-plus-plus.org/>

= Links =
FWIW, here are my js bookmarks (again lots of server side js which might not be as useful to doing browser stuff, and lots of those links are above too):<br/>

* http://www.rubyglob.com/auction-system-using-bayeux-and-node-js/ 
* http://stackoverflow.com/questions/5317282/what-is-the-difference-between-dnode-and-nowjs
* http://jsfiddle.net/
* http://www.learningjquery.com/2009/03/43439-reasons-to-use-append-correctly
* http://fabianosoriani.wordpress.com/2012/03/06/basic-authentication-on-node-js-express-and-mongoose/
* http://bugs.cq.com/browse/CAPW-462
* http://alexyz78.blogspot.com/2009/05/addremove-options-from-select-list-with.html
* http://www.highcharts.com/
* http://tutorials.jenkov.com/jquery/selection.html
* http://quirksmode.org/compatibility.html
* https://gist.github.com/1232497
* http://blog.jcoglan.com/2010/08/10/evented-programming-patterns-testing-event-driven-apps/
* http://japhr.blogspot.com/2010/08/faye-extensions-101-disabling-wildcard.html 
* https://github.com/akdubya/dustjs/blob/master/test/examples.js
* http://laktek.com/2011/03/03/introducing-jquery-smart-autocomplete/
* http://dailyjs.com/page15/
* http://onwebdev.blogspot.com/search/label/jquery
* http://net.tutsplus.com/tutorials/javascript-ajax/how-to-use-the-jquery-ui-autocomplete-widget/
* http://coding.smashingmagazine.com/2011/09/27/searchable-dynamic-content-with-ajax-crawling/
* https://developer.mozilla.org/en/Javascript
* https://aymanh.com/9-javascript-tips-you-may-not-know
* http://www.scoop.it/t/nodejs-code
* http://mongly.com/geo/index
* http://express.davglass.com/ 
* http://robertnyman.com/2008/10/21/javascript-inheritance-experimenting-with-syntax-alternatives-and-private-variables/
* http://jibbering.com/faq/notes/closures/
* http://oscarotero.com/jquery/
* http://stackoverflow.com/questions/7990890/how-to-implement-login-auth-in-node-js/8003291#8003291
* http://akdubya.github.com/dustjs/benchmark/index.html
* http://pixelhandler.com/blog/2012/02/09/develop-a-restful-api-using-node-js-with-express-and-mongoose/ 
* http://jqfundamentals.com/
* http://davybrion.com/blog/2011/07/first-steps-with-mongodb-mongoose-and-jasmine-node-on-node-js/
* https://github.com/yui

